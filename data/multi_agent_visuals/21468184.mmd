flowchart TD
    %% Data source node
    A["<img src='icons/file.svg' width=100 height=100/> <br/> CSV: Healthcare dataset stroke data"]:::dataSource -->|🌀 Load dataset| B["<img src='icons/table.svg' width=100 height=100/> <br/> DataFrame: df"]:::dataNode
    
    %% Data cleaning and preprocessing
    B -->|🔄 Drop irrelevant columns & handle missing data| C["<img src='icons/table.svg' width=100 height=100/> <br/> Clean DataFrame: df"]:::dataNode
    C -->|🔍 Check missing BMI| D["<img src='icons/row_split.svg' width=100 height=100/> <br/> DataFrame: missing"]:::dataNode
    C -->|📋 Filter complete cases| E["<img src='icons/row_split.svg' width=100 height=100/> <br/> DataFrame: no_missing"]:::dataNode
    
    %% Generate groups and start imputation
    E -->|⚖️ Standardize data| F["<img src='icons/column_split.svg' width=100 height=100/> <br/> StandardScaler: std"]:::mlModel
    F -->|🏗️ Fit to non-missing data| G["<img src='icons/brain.svg' width=100 height=100/> <br/> NearestNeighbors: nn"]:::mlModel
    G -->|🔍 Find nearest neighbors| H["<img src='icons/table.svg' width=100 height=100/> <br/> Updated DataFrame: df (imputed BMI)"]:::dataNode
    
    %% Splitting the dataset
    H -->|🚦 train_test_split| I["X_train, y_train"]:::dataNode
    H -->|🚦 train_test_split| J["X_test, y_test"]:::dataNode
    
    %% Model training
    I -->|🤖 Train model with SGD Classifier| K["<img src='icons/brain.svg' width=100 height=100/> <br/> SGDClassifier: clf"]:::mlModel
    K -->|🔧 Hyperparameter tuning with GridSearchCV| L["Optimized Model: clf"]:::mlModel

    %% Model evaluation
    L -->|📊 Evaluate model| M["<img src='icons/table.svg' width=100 height=100/> <br/> Evaluation Results"]:::output

    %% Style Definitions
    classDef dataSource fill:#87CEEB;
    classDef dataNode fill:#C6F4D6;
    classDef mlModel fill:#C6F4D6;
    classDef output fill:#F2C464;
