{"data_sources":[{"file_path":"/kaggle/input/pets-facial-expression-dataset/happy","description":"Images representing happy facial expressions of pets."},{"file_path":"/kaggle/input/pets-facial-expression-dataset/Sad","description":"Images representing sad facial expressions of pets."},{"file_path":"/kaggle/input/pets-facial-expression-dataset/Angry","description":"Images representing angry facial expressions of pets."}],"data_variables":[{"name":"happy_images","description":"Array of images representing happy emotions."},{"name":"sad_images","description":"Array of images representing sad emotions."},{"name":"angry_images","description":"Array of images representing angry emotions."},{"name":"X","description":"Combined array of all images, normalized to [0, 1]."},{"name":"y","description":"One-hot encoded labels for the emotions: happy, sad, angry."},{"name":"X_train","description":"Training set of images."},{"name":"X_test","description":"Testing set of images."},{"name":"y_train","description":"Training set of one-hot encoded labels."},{"name":"y_test","description":"Testing set of one-hot encoded labels."},{"name":"model","description":"CNN model architecture for emotion recognition."},{"name":"history","description":"Training history including accuracy and loss values."},{"name":"class_weights","description":"Weights to manage class imbalance during training."}],"data_flow":[{"variable":"happy_images","creation":"Loaded from folder using load_images_from_folder().","flows_to":"Used to create X and y variables."},{"variable":"sad_images","creation":"Loaded from folder using load_images_from_folder().","flows_to":"Used to create X and y variables."},{"variable":"angry_images","creation":"Loaded from folder using load_images_from_folder().","flows_to":"Used to create X and y variables."},{"variable":"X","creation":"Concatenated from happy_images, sad_images, and angry_images.","flows_to":"Used for train-test split."},{"variable":"y","creation":"Created from corresponding emotion labels.","flows_to":"Used for train-test split."},{"variable":"X_train","creation":"Splitted from X using train_test_split().","flows_to":"Used for training the model."},{"variable":"X_test","creation":"Splitted from X using train_test_split().","flows_to":"Used for evaluating the model."},{"variable":"y_train","creation":"Splitted from y using train_test_split().","flows_to":"Used for training the model."},{"variable":"y_test","creation":"Splitted from y using train_test_split().","flows_to":"Used for evaluating the model."},{"variable":"model","creation":"Built using Sequential API with Conv2D, MaxPooling, etc.","flows_to":"Trained on X_train and y_train."},{"variable":"history","creation":"Created during model.fit() for tracking training."}],"models":[{"model_name":"CNN","input_features":"X_train (images of shape (48, 48, 1))","target_variable":"y_train (one-hot encoded labels)","hyperparameters":{"conv_layers":[{"filters":64,"kernel_size":"(3, 3)"},{"filters":128,"kernel_size":"(3, 3)"},{"filters":512,"kernel_size":"(3, 3)"}],"dense_units":512,"dropout_rates":[0.25,0.5],"batch_normalization":true,"optimizer":"Adam","loss":"categorical_crossentropy"}}]}