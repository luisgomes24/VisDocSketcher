{
    "data_sources": [
        {
            "file_name": "../input/train.csv",
            "description": "Training dataset containing features and SalePrice (the target variable)."
        },
        {
            "file_name": "../input/test.csv",
            "description": "Test dataset containing features without the SalePrice."
        }
    ],
    "data_variables": [
        {
            "name": "train",
            "description": "DataFrame containing the training data after loading from train.csv."
        },
        {
            "name": "test",
            "description": "DataFrame containing the test data after loading from test.csv."
        },
        {
            "name": "train_ID",
            "description": "Series containing Id column from the training data."
        },
        {
            "name": "test_ID",
            "description": "Series containing Id column from the test data."
        },
        {
            "name": "all_data",
            "description": "DataFrame containing the combined training and test data for feature engineering."
        },
        {
            "name": "y_train",
            "description": "Numpy array containing SalePrice values from the training data."
        },
        {
            "name": "skewness",
            "description": "DataFrame for tracking skewness of numerical features."
        },
        {
            "name": "stacked_pred",
            "description": "Final predictions made by the stacked model and saved for submission."
        }
    ],
    "data_flow": [
        {
            "variable": "train",
            "creation": "Loaded from train.csv",
            "flow": "Used for analysis and model training."
        },
        {
            "variable": "test",
            "creation": "Loaded from test.csv",
            "flow": "Used for submission predictions."
        },
        {
            "variable": "all_data",
            "creation": "Concatenation of train and test DataFrames.",
            "flow": "Used in feature engineering and transformations."
        },
        {
            "variable": "y_train",
            "creation": "Extracted SalePrice from train DataFrame.",
            "flow": "Used as the target variable for model training."
        },
        {
            "variable": "stacked_pred",
            "creation": "Generated by the stacked averaging model.",
            "flow": "Saved to submission CSV for final output."
        }
    ],
    "models": [
        {
            "model_name": "Kernel Ridge Regression",
            "features": "Utilizes features from the training data.",
            "hyperparameters": {
                "alpha": 0.6,
                "kernel": "polynomial",
                "degree": 2,
                "coef0": 2.5
            }
        },
        {
            "model_name": "Lasso Regression",
            "features": "Utilizes features from the training data.",
            "hyperparameters": {
                "alpha": 0.0005
            }
        },
        {
            "model_name": "ElasticNet Regression",
            "features": "Utilizes features from the training data.",
            "hyperparameters": {
                "alpha": 0.0005,
                "l1_ratio": 0.9
            }
        },
        {
            "model_name": "Gradient Boosting Regression",
            "features": "Utilizes features from the training data.",
            "hyperparameters": {
                "n_estimators": 3000,
                "learning_rate": 0.05,
                "max_depth": 4,
                "max_features": "sqrt",
                "min_samples_leaf": 15,
                "min_samples_split": 10,
                "loss": "huber"
            }
        },
        {
            "model_name": "XGBoost",
            "features": "Utilizes features from the training data.",
            "hyperparameters": {
                "colsample_bytree": 0.4603,
                "gamma": 0.0468,
                "learning_rate": 0.05,
                "max_depth": 3,
                "min_child_weight": 1.7817,
                "n_estimators": 2200,
                "reg_alpha": 0.4640,
                "reg_lambda": 0.8571,
                "subsample": 0.5213
            }
        },
        {
            "model_name": "LightGBM",
            "features": "Utilizes features from the training data.",
            "hyperparameters": {
                "objective": "regression",
                "num_leaves": 5,
                "learning_rate": 0.05,
                "n_estimators": 720,
                "max_bin": 55,
                "bagging_fraction": 0.8,
                "bagging_freq": 5,
                "feature_fraction": 0.2319
            }
        },
        {
            "model_name": "Stacking Averaged Models",
            "features": "Combination of multiple models: ENet, GBoost, KRR, XGBoost, LightGBM.",
            "hyperparameters": {
                "meta_model": "Lasso Regression"
            }
        }
    ]
}