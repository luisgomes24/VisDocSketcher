{"data_sources": [
    {"file_name": "MNIST Dataset", "description": "The MNIST dataset consists of 60,000 training images and 10,000 testing images of handwritten digits."}
],
"data_variables": [
    {"variable_name": "x_train", "description": "Training set images reshaped into a flat array of 784 pixels (28x28)."},
    {"variable_name": "y_train", "description": "Labels for the training set, corresponding to the digit in each image."},
    {"variable_name": "x_test", "description": "Testing set images reshaped into a flat array of 784 pixels (28x28)."},
    {"variable_name": "y_test", "description": "Labels for the testing set, corresponding to the digit in each image."},
    {"variable_name": "x_train_noisy", "description": "Noisy version of the training set images."},
    {"variable_name": "x_test_noisy", "description": "Noisy version of the testing set images."},
    {"variable_name": "predictions", "description": "Output from the autoencoder for denoised images."},
    {"variable_name": "denoise_and_classify", "description": "Composite model combining the autoencoder and classifier."}
],
"data_flow": [
    {"variable_name": "x_train", "creation_method": "mnist.load_data()", "usage": "Used in training the autoencoder and classifier."},
    {"variable_name": "x_test", "creation_method": "mnist.load_data()", "usage": "Used to evaluate the models both before and after denoising."},
    {"variable_name": "x_train_noisy", "creation_method": "np.random.rand() and np.clip()", "usage": "Input for the autoencoder training to make it learn denoising."},
    {"variable_name": "x_test_noisy", "creation_method": "np.random.rand() and np.clip()", "usage": "Input to evaluate denoised predictions."},
    {"variable_name": "predictions", "creation_method": "autoencoder.predict()", "usage": "Evaluated against original labels to measure performance of the denoising."},
    {"variable_name": "denoise_and_classify", "creation_method": "Model() combining autoencoder and classifier", "usage": "Used to predict classifications on noisy images after denoising."}
],
"models": [
    {"model_name": "Classifier Model", "input_features": "x_train", "target": "y_train", "hyperparameters": {"activation_functions": ["relu", "softmax"], "optimizer": "adam", "loss_function": "sparse_categorical_crossentropy"}},
    {"model_name": "Autoencoder", "input_features": "x_train_noisy", "target": "x_train", "hyperparameters": {"layers": [{"units": 64, "activation": "relu"}, {"units": 784, "activation": "sigmoid"}], "optimizer": "adam", "loss_function": "binary_crossentropy"}}
]}