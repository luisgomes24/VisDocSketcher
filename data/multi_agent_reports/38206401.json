{\n  "data_sources": [\n    {\n      "file_path": "/kaggle/input/train-an-ai-to-play-chess/train.csv",\n      "description": "Contains training data with chess board configurations and corresponding scores for black."\n    },\n    {\n      "file_path": "/kaggle/input/train-an-ai-to-play-chess/test.csv",\n      "description": "Contains test data with chess board configurations for predicting best moves."\n    },\n    {\n      "file_path": "/kaggle/input/train-an-ai-to-play-chess/sample_submission.csv",\n      "description": "Contains sample submission format for predictions."\n    }\n  ],\n  "data_variables": [\n    {\n      "name": "train_df",\n      "description": "DataFrame containing training dataset of chess moves and scores."\n    },\n    {\n      "name": "val_df",\n      "description": "DataFrame for validation set derived from train_df, excluding the last 1000 records."\n    },\n    {\n      "name": "X_train",\n      "description": "Numpy array of encoded FEN strings of the chess boards for training."\n    },\n    {\n      "name": "y_train",\n      "description": "Series containing target scores for black used in training."\n    },\n    {\n      "name": "X_val",\n      "description": "Numpy array of encoded FEN strings of the chess boards for validation."\n    },\n    {\n      "name": "y_val",\n      "description": "Series containing target scores for black used in validation."\n    },\n    {\n      "name": "test_df",\n      "description": "DataFrame containing test dataset of chess moves for making predictions."\n    },\n    {\n      "name": "submission",\n      "description": "DataFrame for submission containing best move predictions for test data."\n    }\n  ],\n  "data_flow": [\n    {\n      "variable": "train_df",\n      "creation": "pd.read_csv",\n      "flow": ["val_df", "X_train", "y_train"]\n    },\n    {\n      "variable": "val_df",\n      "creation": "Slicing train_df",\n      "flow": ["X_val", "y_val"]\n    },\n    {\n      "variable": "X_train",\n      "creation": "np.stack(train_df['board'].apply(encode_fen_string))",\n      "flow": ["model.fit"]\n    },\n    {\n      "variable": "y_train",\n      "creation": "train_df['black_score']",\n      "flow": ["model.fit"]\n    },\n    {\n      "variable": "X_val",\n      "creation": "np.stack(val_df['board'].apply(encode_fen_string))",\n      "flow": ["model.fit"]\n    },\n    {\n      "variable": "y_val",\n      "creation": "val_df['black_score']",\n      "flow": ["model.fit"]\n    },\n    {\n      "variable": "test_df",\n      "creation": "pd.read_csv",\n      "flow": ["submission"]\n    },\n    {\n      "variable": "submission",\n      "creation": "pd.read_csv(sample_submission).copy()",\n      "flow": ["submission.to_csv"]\n    }\n  ],\n  "models": [\n    {\n      "name": "neural network",\n      "type": "Sequential model",\n      "layers": [\n        {"layer": "Flatten"},\n        {"layer": "Dense", "units": 512, "activation": "relu"},\n        {"layer": "Dropout", "rate": 0.2},\n        {"layer": "Dense", "units": 128, "activation": "relu"},\n        {"layer": "Dropout", "rate": 0.2},\n        {"layer": "Dense", "units": 1} \n      ],\n      "hyperparameters": {\n        "optimizer": "adam",\n        "loss": "mean_squared_error"\n      }\n    }\n  ]\n}