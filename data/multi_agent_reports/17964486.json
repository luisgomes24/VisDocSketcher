{
  "data_sources": [
    {
      "file_path": "/kaggle/input/predict-diabetes-based-on-diagnostic-measures/diabetes.csv",
      "description": "This CSV file contains diagnostic measures related to diabetes, including features such as age, gender, BMI, and diagnostic results."
    }
  ],
  "data_variables": [
    {
      "name": "df",
      "description": "A DataFrame storing the data read from the CSV file, including cleaned and adjusted columns."
    },
    {
      "name": "train",
      "description": "The training set created from the original DataFrame, used for training the machine learning models."
    },
    {
      "name": "test",
      "description": "The test set created from the original DataFrame, used for evaluating the performance of the machine learning models."
    },
    {
      "name": "ql",
      "description": "An instance of the QLattice connected for finding explainable models."
    },
    {
      "name": "models",
      "description": "A list of models generated by the QLattice, containing the best mathematical representation for the diabetes dataset."
    },
    {
      "name": "rf",
      "description": "Random Forest classifier model."
    },
    {
      "name": "gb",
      "description": "Gradient Boosting classifier model."
    },
    {
      "name": "lr",
      "description": "Logistic Regression classifier model."
    }
  ],
  "data_flow": [
    {
      "variable": "df",
      "creation_method": "pd.read_csv(data)",
      "flow": [
        "undergoes data type adjustments for categorical variables",
        "processed for decimal format correction",
        "split into 'train' and 'test' DataFrames"
      ]
    },
    {
      "variable": "train",
      "creation_method": "sklearn.model_selection.train_test_split(df)",
      "flow": [
        "used to train the QLattice model",
        "used in model comparison plots"
      ]
    },
    {
      "variable": "test",
      "creation_method": "sklearn.model_selection.train_test_split(df)",
      "flow": [
        "used to evaluate model performance and ROC curve plotting"
      ]
    },
    {
      "variable": "ql",
      "creation_method": "feyn.connect_qlattice()",
      "flow": [
        "used to search for the best model with 'models = ql.auto_run(train,...)'"
      ]
    },
    {
      "variable": "models",
      "creation_method": "ql.auto_run()",
      "flow": [
        "evaluated with training and test data ROC curves"
      ]
    },
    {
      "variable": "rf",
      "creation_method": "feyn.reference.RandomForestClassifier()",
      "flow": [
        "used to plot ROC curve for comparison with other models"
      ]
    },
    {
      "variable": "gb",
      "creation_method": "feyn.reference.GradientBoostingClassifier()",
      "flow": [
        "used to plot ROC curve for comparison with other models"
      ]
    },
    {
      "variable": "lr",
      "creation_method": "feyn.reference.LogisticRegressionClassifier()",
      "flow": [
        "used to plot ROC curve for comparison with other models"
      ]
    }
  ],
  "models": [
    {
      "name": "QLattice Model",
      "input_features": ["age", "glucose"],
      "target_variable": "diabetes",
      "hyperparameters": {
        "max_complexity": 5
      }
    },
    {
      "name": "Random Forest",
      "input_features": "All features from training set",
      "target_variable": "diabetes"
    },
    {
      "name": "Gradient Boosting",
      "input_features": "All features from training set",
      "target_variable": "diabetes"
    },
    {
      "name": "Logistic Regression",
      "input_features": "All features from training set",
      "target_variable": "diabetes",
      "hyperparameters": {
        "max_iter": 10000
      }
    }
  ]
}