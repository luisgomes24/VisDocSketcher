{"data_sources":[{"file_name":"mnist","description":"The MNIST dataset contains handwritten digits, separated into training and test sets."}],"data_variables":[{"variable_name":"x_train","description":"Training images from the MNIST dataset normalized to a range of 0 to 1."},{"variable_name":"y_train","description":"Labels for the training images corresponding to the digits(0-9)."},{"variable_name":"x_test","description":"Test images from the MNIST dataset normalized to a range of 0 to 1."},{"variable_name":"y_test","description":"Labels for the test images corresponding to the digits(0-9)."},{"variable_name":"model","description":"A Sequential model for classifying the MNIST digits built with Keras."},{"variable_name":"y_predict","description":"Predicted values for the test set images."},{"variable_name":"cm","description":"Confusion matrix to evaluate the prediction results."},{"variable_name":"y_pred","description":"Extracted predictions as digit labels for the test set images."}],"data_flow":[{"variable_name":"x_train","created_by":"mnist.load_data()","flows_to":"Normalization and model training"},{"variable_name":"y_train","created_by":"mnist.load_data()","flows_to":"Model training"},{"variable_name":"x_test","created_by":"mnist.load_data()","flows_to":"Normalization and model evaluation"},{"variable_name":"y_test","created_by":"mnist.load_data()","flows_to":"Model evaluation"},{"variable_name":"model","created_by":"tf.keras.models.Sequential() and adding layers","flows_to":"Model compilation and training"},{"variable_name":"y_predict","created_by":"model.predict(x_test)","flows_to":"Confusion matrix evaluation"},{"variable_name":"y_pred","created_by":"np.argmax(y_predict[i])","flows_to":"Confusion matrix evaluation and accuracy score"},{"variable_name":"cm","created_by":"confusion_matrix(y_test,y_pred)","flows_to":"Used for performance evaluation"}],"models":[{"model_name":"Sequential","framework":"Keras","layers":["Flatten","Dense(128, activation='relu')","Dense(512, activation='relu')","Dense(1024, activation='relu')","Dense(512, activation='relu')","Dense(128, activation='relu')","Dense(10, activation='softmax')"],"input_features":"x_train","target_variable":"y_train","hyperparameters":{"optimizer":"adam","loss_function":"sparse_categorical_crossentropy","epochs":10}}]}