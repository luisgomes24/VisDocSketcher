%% This diagram outlines the data flow and model usage in the BirdCLEF 2023 notebook
flowchart TD
    A["BirdCLEF 2023 dataset"] -->|Load test audio paths| B[test_paths]
    A -->|Use sample submission format| C[sample_submission.csv]
    B --> D["Create test_df DataFrame"]
    D -->|Hold test file paths| E[test_df]
    E -->|Load and process audio files| F["load_audio(filepath)"]
    F -->|Create audio frames| G[audio]
    G -->|Convert audio to spectrograms| H[Audio2Spec]
    H -->|Input spectrograms| I[specs]
    subgraph Models
        direction TB
        J[EfficientNet]
    end
    I -->|Conduct predictions| J
    J -->|Output probabilities| K[preds]
    J -->|Load pre-trained models| L[CKPT_PATHS]
    L -->|Loaded models| M[CKPTS]
    K -->|Assign identifiers| N[ids]
    N -->|Create prediction DataFrame| O[pred_df]
    C -->|Combine with| O
    O -->|Final submission format| P["Construct final DataFrame"]

%% Node explanations
%% A: BirdCLEF 2023 dataset contains bird call recordings
%% B: test_paths holds the file paths for audio to be tested
%% C: sample_submission.csv indicates the format for submissions
%% D: test_df is created to manage file paths and related data
%% E: test_df is used for loading audio files
%% F: load_audio function processes audio filepaths
%% G: Audio frames are created from loaded audio
%% H: Audio2Spec class converts audio frames to spectrograms
%% I: specs are the spectrograms used as model inputs
%% J: EfficientNet model performs predictions
%% K: preds are the predicted probabilities of bird species
%% L: CKPT_PATHS stores paths to model checkpoints
%% M: CKPTS are the actual loaded TensorFlow models
%% N: ids manage identifiers for predictions
%% O: pred_df forms the DataFrame for results
%% P: Final DataFrame formatted for challenge submission
